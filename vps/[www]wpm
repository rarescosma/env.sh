#!/usr/bin/php
<?php
/*
WordPress Migration Script
Author: Rares Cosma
URL: http://www.rarescosma.com
Version: 0.8
*/

/**
 * TODO
 * - better error handling
 */

/**
 * Constants
 */
define( 'MYNAME', $argv[0] );

/**
 * CLI
 *
 * --file = the database filename or the zip filename
 * --from_url = the URL you're translating from
 * --to_url = the URL you're translating to
 */

// Check CLI
if ( $argc < 2 ) {
	WPM::usage();
} else {
	// Instantiate WPM object
	$options = getopt( '', array('action:', 'file:', 'from_url:', 'to_url:' ) );

	// Bail if action isn't set
	if( ! isset( $options['action'] ) )
		WPM::usage();

	$wpm = new WPM( $options );
}

class WPM {

	private $cli;
	private $args;

	private $filename;
	private $db, $db_string;

	/**
	 * Displays usage information
	 * @return void
	 */
	static function usage() {
		echo
		'Usage: php ' . MYNAME . ' --action [i|e|t|f|h] [--file filename] [--from_url url1] [--to_url url2]
i    Import database (required db filename)
e    Export database (optional db filename)
t    Export database and translate URLs (serialized support / optional db filename)
f    Export database, translate URLs and pack everything (serialized support / optional zip filename)
u    Import, export and translate, then import again (update)
l    List database credentials from wp-config
h    Display this message' . "\n";
		exit;
	}

	private $defaults = array(
		'from_url'      => 'www.from.example.com',
		'to_url'        => 'www.to.example.com',
		'config_file'   => 'wp-config.php',
		'abspath'       => '/usr/local/bin/',
		'db_file'       => 'db.sql',
		'zip_file'      => 'all.zip',
		'zip_exclude'   => array(
			MYNAME,             // Do not include this file
			'wp-config.php',    // We don't want to overwrite the destination config file
			'*.sql.bak*',       // Do not include SQL backup files
			'*.svn*',           // Do not include SVN special files
			'*.git*'            // Skip Git stuff
		)
	);


	/**
	 * Parses the command line, calls the appropiate setters and dispatches
	 * the commands.
	 *
	 * @param array $cli  Command line parameters, usually from $argv
	 * @param array $args Default parameters
	 */
	function __construct( $options = array() ) {
		$this->args = $this->defaults;

		// The command line
		$action = $options['action'];
		$this->args['action'] = $action;
		$filename = isset( $options['file'] ) ? $options['file'] : '';
		$from_url = isset( $options['from_url'] ) ? $options['from_url'] : '';
		$to_url = isset( $options['to_url'] ) ? $options['to_url'] : '';

		// Implemented command line options
		$implemented = array( 'i', 'e', 't', 'f', 'h', 'u', 'l' );
		if( ! in_array( $action, $implemented ) ) $this->usage();

		// These command line options require an existing db filename
		$dbfile_req_opt = array( 'i', 'u' );
		if ( in_array( $action, $dbfile_req_opt ) ) {
			if ( empty ( $filename ) ) {
				echo "Please enter a filename.\n\n" ;
				$this->usage();
			}
			if ( ! file_exists( $filename ) ) {
				echo "File does not exist.\n\n" ;
				$this->usage();
			} else {
				$this->args['db_file'] = $filename;
			}
		}

		// These command line options take an optional db filename
		$dbfile_opt = array( 'e', 't' );
		if ( in_array( $action, $dbfile_opt ) ) {
			if ( ! empty( $filename ) ) $this->args['db_file'] = $filename;
		}

		// These command line options take an optional zip filename
		$zipfile_opt = array( 'f' );
		if ( in_array( $action, $zipfile_opt ) ) {
			if ( ! empty( $filename ) ) $this->args['zip_file'] = $filename;
		}

		// These command line options require parsing the WP config file
		$db_req_opt = array( 'i', 'e', 't', 'f', 'u', 'l' );
		if( in_array( $action, $db_req_opt ) ) $this->set_db();

		// These command line options require URLs
		$urls_req_opt = array ( 't', 'f', 'u' );
		if( in_array( $action, $urls_req_opt ) ) $this->set_urls( $from_url, $to_url );

		switch ( $action ) {
			case 'i':
				// Import DB file
				$this->import();
			break;

			case 'e':
				// Export DB file
				$this->export();
			break;

			case 't':
				// Export & update serialized strings
				$this->export()->update_serialized();
			break;

			case 'f':
				// Export, translate serialized and pack
				$this->export()->update_serialized()->pack();
			break;

			case 'u':
				/**
				 * HACK!
				 * Import, export translated and import back
				 */
				$this->import();

				//* Hijack the db_file and call set_urls() again
				$tmp = $this->args['db_file'];
				$this->args['db_file'] = 'tmp.sql';
				$this->set_urls( $from_url, $to_url );

				// Resume the chain
				$this->export()->update_serialized();
				$this->import();

				// Remove the temporary file
				@unlink( 'tmp.sql' );
			break;

			case 'l':
				/**
				 * List credentials
				 */
				print_r( $this->db );
			break;

			default:
				// Print usage
				$this->usage();
			break;
		}
	}

	/**
	 * Imports a WordPress SQL file through the 'mysql' shell command
	 *
	 * @return void
	 */
	private function import() {

		$db_file = $this->args['db_file'];
		echo "Importing from ${db_file}\n";

		$cmd = 'mysql' . $this->db_string . '< ' . $db_file;
		$ret = shell_exec( $cmd );

		if ( ! empty( $ret ) ) {
			echo "SQL error: \n\n" . $ret;
		}

		return $this;
	}

	/**
	 * Exports a WordPress SQL file through the 'mysqldump' shell command
	 *
	 * @return void
	 */
	private function export() {

		$db_file = $this->args['db_file'];
		echo "Exporting to ${db_file}\n";

		$cmd = 'mysqldump' . $this->db_string . '> ' . $db_file;
		$ret = shell_exec( $cmd );

		if ( ! empty( $ret ) ) {
			echo "SQL error: \n\n" . $ret;
		}

		return $this;
	}

	/**
	 * Packs the WordPress directory, excluding patterns found in
	 * $this->args['zip_exclude']
	 *
	 * @return void
	 */
	private function pack() {
		$exclude_string = implode( ' -x ', $this->args['zip_exclude'] );
		$cmd = 'zip -q -r ' . $this->args['zip_file'] . ' . -x ' . $exclude_string;
		$ret = shell_exec( $cmd );

		if ( ! empty( $ret ) ) {
			echo "Shell error: \n\n" . $ret;
		}

		return $this;
	}

	/**
	 * Exports the database, then performs serialized search & replace
	 * on all fields
	 *
	 * @return void
	 */
	private function update_serialized() {

		$from_url = $this->args['from_url'];
		$to_url = $this->args['to_url'];
		$filename = $this->args['db_file'];

		echo "Appending updates from ${from_url} to ${to_url}. Filename: ${filename}\n";

		// Open filename
		$fp = @fopen( $filename, 'a' );
		flock( $fp, 2 );

		// Set search and replace arrays
		$searches = array(
			$this->args['from_url']
		);

		$replaces = array(
			$this->args['to_url']
		);

		// Get a list of all tables
		$db = $this->db;
		$con = mysql_connect( $db['host'], $db['user'], $db['password'] );
		mysql_query( "SET NAMES 'utf8â€²", $con );
		$tables = mysql_db_query( $db['name'], 'SHOW TABLES', $con );

		// Loop through the tables
		while ( $table = mysql_fetch_array( $tables ) ) {
			$table = $table[0];
			$fields = mysql_db_query( $db['name'], 'DESCRIBE ' . $table, $con );

			$columns = array();
			$index_columns = array();

			while ( $field_arr = mysql_fetch_array( $fields ) ) {
				$columns[] = $field_arr['Field'];
				if ( $field_arr['Key'] == 'PRI' ) {
					$index_columns[] = $field_arr['Field'];
				}
			}

			// Get the data
			$data = mysql_db_query( $db['name'], "SELECT * FROM {$table}", $con );
			while ( $row = mysql_fetch_array( $data ) ) {
				$do_update = false;
				$update_parts = array();

				foreach ( $columns as $column ) {
					$data_to_fix = $row[$column];
					$data_fixed = $data_to_fix; // Set equal for now

					// Try to unserialize
					$unserialized = @unserialize( $data_to_fix );
					if ( 'b:0;' === $data_to_fix || false !== $unserialized ) {
						// Manipulate the unserialized data
						if ( is_string( $unserialized ) ) {
							$unserialized = str_replace( $searches, $replaces, $unserialized );
						} else {
							$this->array_walk_recursive_referential( $unserialized, 'str_replace', array( $searches, $replaces ) );
						}

						$data_fixed = serialize( $unserialized );
					} else {
						$data_fixed = str_replace( $searches, $replaces, $data_to_fix );
					}

					if ( $data_to_fix != $data_fixed ) {
						$update_parts[] = $column . ' = "' . mysql_real_escape_string( $data_fixed ) . '"';
						$do_update = true;
					}
				}

				if ( $do_update ) {
					// Assemble query
					// UPDATE parts
					$sql = array();
					$sql[] = "\nUPDATE {$table} SET " . implode( ', ', $update_parts );
					// Add the WHERE clauses using the primary keys
					$where_parts = array();
					foreach ( $index_columns as $index_column ) {
						$where_parts[] = $index_column . ' = "' . $row[$index_column] . '"';
					}
					$sql[] = ' WHERE ' . implode( ' AND ', $where_parts ) . "; \n";
					fwrite( $fp, implode( '', $sql ) );
				}
			}
		}

		// Cleanup
		mysql_close( $con );
		flock( $fp, 3 );
		fclose( $fp );

		return $this;
	}

	/**
	 * Uses a closure to emulate referential behaviour for array_walk_recursive
	 * @param  array $array       The subject array
	 * @param  mixed $function    The callback
	 * @param  array $parameters  An array of parameters to pass to the callback
	 *
	 * @return void
	 */
	private function array_walk_recursive_referential( &$array, $function, $parameters = array() ) {

		$reference_function = function( &$value, $key, $userdata ) {
			$parameters = array_merge( $userdata[1], array( $value ) );
			if ( is_string( $value ) ) {
				$value = call_user_func_array( $userdata[0], $parameters );
			}
		};

		array_walk_recursive( $array, $reference_function, array( $function, $parameters ) );
	}


	/**
	 * Scours the WordPress config file for database connection
	 * parametes, then sets the 'db' and 'db_string' class variables
	 *
	 * @return void
	 */
	private function set_db() {
		// Let's try a more hacky approach of actually including wp-config.php

		// Define bogus ABSPATH
		define( 'ABSPATH', $this->args['abspath'] );

		// Load wp-config.php
		include 'wp-config.php';

		$connection = array(
			'name' => 'DB_NAME',
			'user' => 'DB_USER',
			'password' => 'DB_PASSWORD',
			'host' => 'DB_HOST'
		);

		$db = array();
		foreach ( $connection as $key => $def_string ) {
			if( defined( $def_string ) )
				$db[$key] = constant( $def_string );
		}

		// Set table prefix
		$db['table_prefix'] = $table_prefix;

		$this->db_string = ' -h ' . $db['host'] .  ' -u ' . $db['user'] . ' ' . $db['name'] . ' ';
		// Check for empty password
		if( !empty( $db['password'] ) )
			$this->db_string .= ' -p' . $db['password'];

		$this->db = $db;

		// Chain
		return $this;
	}


	/**
	 * Tries to connect to the WordPress db to fetch and autocomplete the current
	 * base URL for the website.
	 *
	 * @return void
	 */
	private function set_urls( $from_url = '', $to_url = '' ) {

		// From URL
		if ( ! empty( $from_url ) ) {
			$this->args['from_url'] = $from_url;
		} else {
			// Try to get DB params
			if( !is_array( $this->db ) )
				$this->set_db();

			$db = $this->db;

			// From URL
			$url = $this->args['from_url'];

			// Table prefix
			$prefix = $this->db['table_prefix'];

			$c = mysql_connect( $db['host'], $db['user'], $db['password'] );
			if ( $c ) {
				mysql_select_db( $db['name'] );
				$q = "SELECT option_value from ${prefix}options where option_name = 'siteurl'";
				$r = mysql_query( $q );
				$r = mysql_fetch_assoc( $r );
				$url = empty( $r['option_value'] ) ? $url : $r['option_value'];

				// Trim protocol
				$url = str_replace( array( 'http://', 'https://' ), '', $url );

				// Trim ending slash
				$url = rtrim( $url, '/' );
			}

			if ( 'u' == $this->args['action'] ) {
				$this->args['from_url'] = $url;
			} else {
				$this->args['from_url'] = $this->readline( 'From URL', $url );
			}
		}

		// To URL
		if ( ! empty( $to_url ) ) {
			$this->args['to_url'] = $to_url;
		} else {
			$url = $this->args['to_url'];
			$this->args['to_url'] = $this->readline( 'To URL', $url );
		}

		// Chain
		return $this;
	}


	/**
	 * Convenience method to read keyboard input
	 *
	 * @param  string $message A message prompt.
	 * @param  string $default A default value that will be used if the input
	 * is empty
	 *
	 * @return string The trimmed string or the default value if empty
	 */
	private function readline( $message, $default ) {
		echo "${message} [${default}]: ";

		$fp = fopen( 'php://stdin', 'r' );
		$in = fgets( $fp, 1024 );
		fclose( $fp );

		$in = trim( $in );

		$in = ( empty( $in ) ) ? $default : $in;

		return $in;
	}

}

